#SELECT `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME`='bootex';
#SHOW TABLE STATUS FROM `bootex`;
#SHOW FUNCTION STATUS WHERE `Db`='bootex';
#SHOW PROCEDURE STATUS WHERE `Db`='bootex';
#SHOW TRIGGERS FROM `bootex`;
#SELECT *, EVENT_SCHEMA AS `Db`, EVENT_NAME AS `Name` FROM information_schema.`EVENTS` WHERE `EVENT_SCHEMA`='bootex';
#SHOW VARIABLES;
#FLUSH PRIVILEGES;
#SHOW COLUMNS FROM `mysql`.`user`;
#SELECT `user`, `host`, IF(LENGTH(password)>0, password, authentication_string) AS `password` FROM `mysql`.`user`;
#CREATE USER 'bootuser'@'%' IDENTIFIED BY 'bootuser';
#GRANT USAGE ON *.* TO 'bootuser'@'%';
#GRANT EXECUTE, SELECT, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON `bootex`.* TO 'bootuser'@'%' WITH GRANT OPTION;
#FLUSH PRIVILEGES;
#SHOW GRANTS FOR 'bootuser'@'%';

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/bootex
spring.datasource.username=bootuser
spring.datasource.password=bootuser

## jpa 관련설정 추가 (JPA : ORM에서 시작되었다. ) 데이터베이스도 객체형으로 보자
spring.jpa.hibernate.ddl-auto=update
##update : 기존과 다른 테이블이 검증되면 drop 후 create 한다.
##none : 테이블 구조를 변경하지 않는다.
##create : 실행할 때마다 테이블을 새로 만든다.
##create-drop : 실행할 때 테이블을 새로 만들고 종료할 때 drop
##validate : 변경된 부분만 콘솔만 알려줌(구조 변경 안 함)
spring.jpa.properties.hibernate.format_sql=true
## 콘솔에 sql 쿼리문을 보여줌
spring.jpa.show-sql=true
## jpa가 하는말을 보여줌
